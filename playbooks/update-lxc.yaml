---
- hosts: all
  become: true
  vars:
    ansible_user: "{{ lookup('env', 'ANSIBLE_USER') }}"

  tasks:
    - name: Detect operating system
      ansible.builtin.shell: |
        if grep -qi ubuntu /etc/os-release; then
          echo "Ubuntu detected."
        elif grep -qi debian /etc/os-release; then
          echo "Debian detected."
        else
          echo "Unsupported operating system. Exiting."
          exit 1
        fi
      register: os_output
      changed_when: false

    - name: Run apt update and capture output
      ansible.builtin.shell: apt update
      register: apt_update
      ignore_errors: yes

    - name: Extract missing GPG keys from apt update
      set_fact:
        missing_keys: "{{ apt_update.stdout | regex_findall('NO_PUBKEY ([A-F0-9]{16})') }}"

    - name: Import missing GPG keys
      ansible.builtin.apt_key:
        keyserver: keyserver.ubuntu.com
        id: "{{ item }}"
      loop: "{{ missing_keys }}"
      when: missing_keys is defined and missing_keys | length > 0

    - name: Re-run apt update after adding keys
      ansible.builtin.apt:
        update_cache: yes
      when: missing_keys is defined and missing_keys | length > 0

    - name: Check for available updates
      ansible.builtin.shell: |
        LC_ALL=C apt list --upgradeable 2>/dev/null | grep -v "^Listing" | wc -l
      register: update_count
      changed_when: false

    - name: Upgrade system
      ansible.builtin.apt:
        upgrade: dist
        update_cache: yes
      register: upgrade_result
...
