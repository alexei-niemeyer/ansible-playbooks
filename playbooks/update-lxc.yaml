---
- hosts: all
  become: true
  vars:
    ansible_user: "{{ lookup('env', 'ANSIBLE_USER') }}"
    keyservers:
      - keyserver.ubuntu.com
      - pgp.mit.edu
      - hkps.pool.sks-keyservers.net

  tasks:
    - name: Detect operating system
      ansible.builtin.shell: |
        if grep -qi ubuntu /etc/os-release; then
          echo "Ubuntu detected."
        elif grep -qi debian /etc/os-release; then
          echo "Debian detected."
        else
          echo "Unsupported operating system. Exiting."
          exit 1
        fi
      register: os_output
      changed_when: false

    - name: Führe apt update aus und erfasse die Ausgabe
      ansible.builtin.shell: apt update
      register: apt_update
      ignore_errors: yes

    - name: Extrahiere fehlende GPG-Schlüssel aus apt update
      set_fact:
        missing_keys: "{{ apt_update.stdout | regex_findall('NO_PUBKEY ([A-F0-9]{16})') }}"
      when: apt_update.stdout is defined

    - name: Debug fehlende Schlüssel
      ansible.builtin.debug:
        var: missing_keys
      when: missing_keys | length > 0

    - name: Importiere fehlende GPG-Schlüssel von den Keyservern
      block:
        - name: Importiere GPG-Schlüssel von jedem Keyserver
          ansible.builtin.apt_key:
            keyserver: "{{ keyserver }}"
            id: "{{ key }}"
            state: present
          loop: "{{ missing_keys }}"
          loop_control:
            loop_var: key
          vars:
            keyserver: "{{ item }}"
          with_items: "{{ keyservers }}"
          register: import_results
          ignore_errors: yes
          when: missing_keys | length > 0

        - name: Sammle erfolgreich importierte Schlüssel
          set_fact:
            imported_keys: "{{ imported_keys | default([]) + [ item.item ] }}"
          when: item.rc == 0
          loop: "{{ import_results.results }}"
          loop_control:
            label: "{{ item.item }} from {{ item.item.keyserver }}"

        - name: Debug importierte Schlüssel
          ansible.builtin.debug:
            var: imported_keys
          when: imported_keys is defined

      when: missing_keys | length > 0

    - name: Verifiziere importierte GPG-Schlüssel
      ansible.builtin.command: apt-key list
      register: apt_keys
      changed_when: false

    - name: Debug importierte GPG-Schlüssel
      ansible.builtin.debug:
        var: apt_keys.stdout_lines

    - name: Aktualisiere den apt-Cache nach Schlüssel-Import
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 0
      when: imported_keys is defined and imported_keys | length > 0

    - name: Re-führe apt update nach Schlüssel-Import aus
      ansible.builtin.shell: apt update
      register: second_apt_update
      when: imported_keys is defined and imported_keys | length > 0
      ignore_errors: yes

    - name: Extrahiere verbleibende fehlende GPG-Schlüssel aus dem zweiten apt update
      set_fact:
        new_missing_keys: "{{ second_apt_update.stdout | regex_findall('NO_PUBKEY ([A-F0-9]{16})') }}"
      when: second_apt_update.stdout is defined

    - name: Fehler auslösen, wenn noch fehlende GPG-Schlüssel vorhanden sind
      ansible.builtin.fail:
        msg: "Still missing GPG keys after import: {{ new_missing_keys }}"
      when: new_missing_keys | length > 0

    - name: Überprüfe verfügbare Updates
      ansible.builtin.shell: |
        LC_ALL=C apt list --upgradeable 2>/dev/null | grep -v "^Listing" | wc -l
      register: update_count
      changed_when: false

    - name: Upgrade system
      ansible.builtin.apt:
        upgrade: dist
        update_cache: yes
      register: upgrade_result
...
