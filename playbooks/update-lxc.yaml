---
- name: General Debian Update with Automatic GPG Key Management
  hosts: all
  become: true
  vars:
    ansible_user: "{{ lookup('env', 'ANSIBLE_USER') }}"
    keyservers:
      - keyserver.ubuntu.com

  tasks:
    - name: Detect operating system
      ansible.builtin.command: cat /etc/os-release
      register: os_release
      changed_when: false

    - name: Check if the operating system is supported
      ansible.builtin.set_fact:
        is_supported_os: "{{ os_release.stdout | regex_search('ID=(debian|ubuntu)', '\\1') }}"
      when: os_release.stdout is defined

    - name: Fail if the operating system is not supported
      ansible.builtin.fail:
        msg: "Unsupported operating system."
      when: is_supported_os is not defined

    - name: Run apt update and capture output
      ansible.builtin.shell: apt update
      register: apt_update
      ignore_errors: yes

    - name: Extract missing GPG keys from apt update
      set_fact:
        missing_keys: "{{ apt_update.stdout | regex_findall('NO_PUBKEY ([A-F0-9]{16})') }}"
      when: apt_update.stdout is defined

    - name: Debug missing keys
      ansible.builtin.debug:
        var: missing_keys
      when: missing_keys | length > 0

    - name: Import missing GPG keys from keyservers
      ansible.builtin.apt_key:
        keyserver: "{{ item.1 }}"
        id: "{{ item.0 }}"
        state: present
      loop: "{{ missing_keys | product(keyservers) | list }}"
      loop_control:
        label: "Import key {{ item.0 }} from {{ item.1 }}"
      register: import_results
      ignore_errors: yes
      when: missing_keys | length > 0

    - name: Collect successfully imported keys
      set_fact:
        imported_keys: "{{ imported_keys | default([]) + [ item.item.0 ] }}"
      when: not item.failed
      loop: "{{ import_results.results }}"
      loop_control:
        label: "{{ item.item.0 }} from {{ item.item.1 }}"

    - name: Debug imported keys
      ansible.builtin.debug:
        var: imported_keys
      when: imported_keys is defined

    - name: Update the apt cache after importing keys
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 0
      when: imported_keys is defined and imported_keys | length > 0

    - name: Re-run apt update after importing keys
      ansible.builtin.shell: apt update
      register: second_apt_update
      when: imported_keys is defined and imported_keys | length > 0
      ignore_errors: yes

    - name: Extract remaining missing GPG keys from the second apt update
      set_fact:
        new_missing_keys: "{{ second_apt_update.stdout | regex_findall('NO_PUBKEY ([A-F0-9]{16})') }}"
      when: second_apt_update.stdout is defined

    - name: Fail if there are still missing GPG keys after import
      ansible.builtin.fail:
        msg: "Still missing GPG keys after import: {{ new_missing_keys }}"
      when: (new_missing_keys | default([])) | length > 0

    - name: Check for available updates
      ansible.builtin.shell: |
        LC_ALL=C apt list --upgradeable 2>/dev/null | grep -v "^Listing" | wc -l
      register: update_count
      changed_when: false

    - name: Upgrade the system
      ansible.builtin.apt:
        upgrade: dist
        update_cache: yes
      register: upgrade_result
...
